# ── metadata ────────────────────────────────────────────────────────────────
id: generate_user_story
version: "2025-05-11"
language: fa
author: product_owner_assistant
temperature: 0.3
model_hint: "gemini-2.0-flash"
model_engine: "gemini"
description: >
  Generate a single INVEST-compliant user story with structured output.

# ── prompt template (Jinja-style placeholders) ─────────────────────────────
prompt: |
  You are an experienced Agile Product Owner.

  Context:

  Product/Feature Area: {{ product_area }}

  Business Goal / OKR: {{ business_goal }}

  Primary Persona: {{ primary_persona }}

  Dependencies / Constraints: {{ dependencies }}

  Description of work: {{ description }}

  {{ epic_context }}

  {{ parent_story_context }}

  Instructions:

  Write one INVEST-compliant user story in the format:
  'As a <persona role>, I want <capability> so that <benefit/value>.'

  Add a concise narrative (≤ 3 sentences) that explains why this story matters to the business goal.

  Provide Acceptance Criteria using Gherkin-style "Given / When / Then" bullets (≥ 3 distinct criteria, covering happy-path and one edge case).

  List Non-functional Requirements that could cause the story to fail if ignored (e.g., performance, security, accessibility).

  Suggest Sizing hints (story-points or T-shirt size) with a short rationale.

  Suggest Risks & Open Questions the team should discuss during refinement.

  End with a Definition of Done checklist that references code, tests, documentation, and release validation.

  Tone & Style:
  - Clear, testable, and free of jargon
  - Bullet points where possible
  - Avoid passive voice
  - Generate the result in google doc format
  - Use markdown for formatting
  - Generate the story in fluent Farsi. 

  {{ format_instructions }}

# ── response schema for StructuredOutputParser ─────────────────────────────
schemas:
  - name: user_story
    type: object
    description: >
      Dictionary containing:
        summary (string): A concise title for the story,
        description (string): Full user story with narrative, acceptance criteria, and definition of done,
        component (string): Primary team/department responsible,
        story_points (number): Estimated story points (1–13),
        priority (string): High, Medium, or Low

# ── optional helper sections ───────────────────────────────────────────────
variables:               # what the template expects
  product_area: "Product or feature area"
  business_goal: "Business goal or OKR"
  primary_persona: "Primary persona"
  dependencies: "Dependencies or constraints"
  description: "Work description"
  epic_context: "(optional) Epic-level context"
  parent_story_context: "(optional) Parent story context"
  format_instructions: "autogenerated by StructuredOutputParser"

few_shots: []            # no example turns supplied

output_style: >
  JSON only – no prose, no markdown – matching the schemas exactly.
